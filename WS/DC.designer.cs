#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Chat")]
	public partial class DCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void Insertparticipant(participant instance);
    partial void Updateparticipant(participant instance);
    partial void Deleteparticipant(participant instance);
    #endregion
		
		public DCDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ChatConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Message> Message
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<participant> participant
		{
			get
			{
				return this.GetTable<participant>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _idmessage;
		
		private string _contenu;
		
		private decimal _idparticipant;
		
		private EntityRef<participant> _participant;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidmessageChanging(decimal value);
    partial void OnidmessageChanged();
    partial void OncontenuChanging(string value);
    partial void OncontenuChanged();
    partial void OnidparticipantChanging(decimal value);
    partial void OnidparticipantChanged();
    #endregion
		
		public Message()
		{
			this._participant = default(EntityRef<participant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idmessage", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal idmessage
		{
			get
			{
				return this._idmessage;
			}
			set
			{
				if ((this._idmessage != value))
				{
					this.OnidmessageChanging(value);
					this.SendPropertyChanging();
					this._idmessage = value;
					this.SendPropertyChanged("idmessage");
					this.OnidmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contenu", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string contenu
		{
			get
			{
				return this._contenu;
			}
			set
			{
				if ((this._contenu != value))
				{
					this.OncontenuChanging(value);
					this.SendPropertyChanging();
					this._contenu = value;
					this.SendPropertyChanged("contenu");
					this.OncontenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idparticipant", DbType="Decimal(18,0) NOT NULL")]
		public decimal idparticipant
		{
			get
			{
				return this._idparticipant;
			}
			set
			{
				if ((this._idparticipant != value))
				{
					if (this._participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidparticipantChanging(value);
					this.SendPropertyChanging();
					this._idparticipant = value;
					this.SendPropertyChanged("idparticipant");
					this.OnidparticipantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="participant_Message", Storage="_participant", ThisKey="idparticipant", OtherKey="idparticipant", IsForeignKey=true)]
		public participant participant
		{
			get
			{
				return this._participant.Entity;
			}
			set
			{
				participant previousValue = this._participant.Entity;
				if (((previousValue != value) 
							|| (this._participant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._participant.Entity = null;
						previousValue.Message.Remove(this);
					}
					this._participant.Entity = value;
					if ((value != null))
					{
						value.Message.Add(this);
						this._idparticipant = value.idparticipant;
					}
					else
					{
						this._idparticipant = default(decimal);
					}
					this.SendPropertyChanged("participant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.participant")]
	public partial class participant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _idparticipant;
		
		private string _pseudo;
		
		private EntitySet<Message> _Message;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidparticipantChanging(decimal value);
    partial void OnidparticipantChanged();
    partial void OnpseudoChanging(string value);
    partial void OnpseudoChanged();
    #endregion
		
		public participant()
		{
			this._Message = new EntitySet<Message>(new Action<Message>(this.attach_Message), new Action<Message>(this.detach_Message));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idparticipant", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal idparticipant
		{
			get
			{
				return this._idparticipant;
			}
			set
			{
				if ((this._idparticipant != value))
				{
					this.OnidparticipantChanging(value);
					this.SendPropertyChanging();
					this._idparticipant = value;
					this.SendPropertyChanged("idparticipant");
					this.OnidparticipantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pseudo", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string pseudo
		{
			get
			{
				return this._pseudo;
			}
			set
			{
				if ((this._pseudo != value))
				{
					this.OnpseudoChanging(value);
					this.SendPropertyChanging();
					this._pseudo = value;
					this.SendPropertyChanged("pseudo");
					this.OnpseudoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="participant_Message", Storage="_Message", ThisKey="idparticipant", OtherKey="idparticipant")]
		public EntitySet<Message> Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				this._Message.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Message(Message entity)
		{
			this.SendPropertyChanging();
			entity.participant = this;
		}
		
		private void detach_Message(Message entity)
		{
			this.SendPropertyChanging();
			entity.participant = null;
		}
	}
}
#pragma warning restore 1591
